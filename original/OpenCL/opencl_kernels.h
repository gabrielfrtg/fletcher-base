#ifndef OPENCL_KERNELS_H
#define OPENCL_KERNELS_H

static const char *opencl_kernel_source =
"#define L1 0.8f\n"
"#define L2 -0.2f\n"
"#define L3 0.0380952380952381f\n"
"#define L4 -0.0035714285714285713f\n"
"#define L11 0.64f\n"
"#define L12 -0.16f\n"
"#define L13 0.03047619047619047618f\n"
"#define L14 -0.00285714285714285713f\n"
"#define L22 0.04f\n"
"#define L23 -0.00761904761904761904f\n"
"#define L24 0.00071428571428571428f\n"
"#define L33 0.00145124716553287981f\n"
"#define L34 -0.00013605442176870748f\n"
"#define L44 0.00001275510204081632f\n"
"#define K0 -2.84722222222222222222f\n"
"#define K1 1.6f\n"
"#define K2 -0.2f\n"
"#define K3 0.02539682539682539682f\n"
"#define K4 -0.00178571428571428571f\n"
"inline float Der2(__global const float *p, int i, int s, float d2inv) {\n"
"    return (K0 * p[i] + K1 * (p[i + s] + p[i - s]) + K2 * (p[i + 2 * s] + p[i - 2 * s]) +\n"
"            K3 * (p[i + 3 * s] + p[i - 3 * s]) + K4 * (p[i + 4 * s] + p[i - 4 * s])) * d2inv;\n"
"}\n"
"inline float DerCross(__global const float *p, int i, int s11, int s21, float dinv) {\n"
"    float term0 = L11 * (p[i + s21 + s11] - p[i + s21 - s11] - p[i - s21 + s11] + p[i - s21 - s11]);\n"
"    float term1 = L12 * (p[i + s21 + 2 * s11] - p[i + s21 - 2 * s11] - p[i - s21 + 2 * s11] + p[i - s21 - 2 * s11]\n"
"                       + p[i + 2 * s21 + s11] - p[i + 2 * s21 - s11] - p[i - 2 * s21 + s11] + p[i - 2 * s21 - s11]);\n"
"    float term2 = L13 * (p[i + s21 + 3 * s11] - p[i + s21 - 3 * s11] - p[i - s21 + 3 * s11] + p[i - s21 - 3 * s11]\n"
"                       + p[i + 3 * s21 + s11] - p[i + 3 * s21 - s11] - p[i - 3 * s21 + s11] + p[i - 3 * s21 - s11]);\n"
"    float term3 = L14 * (p[i + s21 + 4 * s11] - p[i + s21 - 4 * s11] - p[i - s21 + 4 * s11] + p[i - s21 - 4 * s11]\n"
"                       + p[i + 4 * s21 + s11] - p[i + 4 * s21 - s11] - p[i - 4 * s21 + s11] + p[i - 4 * s21 - s11]);\n"
"    float term4 = L22 * (p[i + 2 * s21 + 2 * s11] - p[i + 2 * s21 - 2 * s11] - p[i - 2 * s21 + 2 * s11] + p[i - 2 * s21 - 2 * s11]);\n"
"    float term5 = L23 * (p[i + 2 * s21 + 3 * s11] - p[i + 2 * s21 - 3 * s11] - p[i - 2 * s21 + 3 * s11] + p[i - 2 * s21 - 3 * s11]\n"
"                       + p[i + 3 * s21 + 2 * s11] - p[i + 3 * s21 - 2 * s11] - p[i - 3 * s21 + 2 * s11] + p[i - 3 * s21 - 2 * s11]);\n"
"    float term6 = L24 * (p[i + 2 * s21 + 4 * s11] - p[i + 2 * s21 - 4 * s11] - p[i - 2 * s21 + 4 * s11] + p[i - 2 * s21 - 4 * s11]\n"
"                       + p[i + 4 * s21 + 2 * s11] - p[i + 4 * s21 - 2 * s11] - p[i - 4 * s21 + 2 * s11] + p[i - 4 * s21 - 2 * s11]);\n"
"    float term7 = L33 * (p[i + 3 * s21 + 3 * s11] - p[i + 3 * s21 - 3 * s11] - p[i - 3 * s21 + 3 * s11] + p[i - 3 * s21 - 3 * s11]);\n"
"    float term8 = L34 * (p[i + 3 * s21 + 4 * s11] - p[i + 3 * s21 - 4 * s11] - p[i - 3 * s21 + 4 * s11] + p[i - 3 * s21 - 4 * s11]\n"
"                       + p[i + 4 * s21 + 3 * s11] - p[i + 4 * s21 - 3 * s11] - p[i - 4 * s21 + 3 * s11] + p[i - 4 * s21 - 3 * s11]);\n"
"    float term9 = L44 * (p[i + 4 * s21 + 4 * s11] - p[i + 4 * s21 - 4 * s11] - p[i - 4 * s21 + 4 * s11] + p[i - 4 * s21 - 4 * s11]);\n"
"    return (term0 + term1 + term2 + term3 + term4 + term5 + term6 + term7 + term8 + term9) * dinv;\n"
"}\n"
"__kernel void propagate(const int sx, const int sy, const int sz, const int bord,\n"
"                        const float dx, const float dy, const float dz, const float dt, const int it,\n"
"                        __global const float *ch1dxx, __global const float *ch1dyy, __global const float *ch1dzz,\n"
"                        __global const float *ch1dxy, __global const float *ch1dyz, __global const float *ch1dxz,\n"
"                        __global const float *v2px, __global const float *v2pz, __global const float *v2sz,\n"
"                        __global const float *v2pn, __global float *pp, __global float *pc,\n"
"                        __global float *qp, __global float *qc) {\n"
"    const int ix = get_global_id(0);\n"
"    const int iy = get_global_id(1);\n"
"    if (ix >= sx || iy >= sy) {\n"
"        return;\n"
"    }\n"
"    if (ix < bord || ix >= sx - bord || iy < bord || iy >= sy - bord) {\n"
"        return;\n"
"    }\n"
"    const int strideX = 1;\n"
"    const int strideY = sx;\n"
"    const int strideZ = sx * sy;\n"
"    const float dxxinv = 1.0f / (dx * dx);\n"
"    const float dyyinv = 1.0f / (dy * dy);\n"
"    const float dzzinv = 1.0f / (dz * dz);\n"
"    const float dxyinv = 1.0f / (dx * dy);\n"
"    const float dxzinv = 1.0f / (dx * dz);\n"
"    const float dyzinv = 1.0f / (dy * dz);\n"
"    for (int iz = bord + 1; iz < sz - bord - 1; ++iz) {\n"
"        const int i = ((iz) * sy + iy) * sx + ix;\n"
"        const float pxx = Der2(pc, i, strideX, dxxinv);\n"
"        const float pyy = Der2(pc, i, strideY, dyyinv);\n"
"        const float pzz = Der2(pc, i, strideZ, dzzinv);\n"
"        const float pxy = DerCross(pc, i, strideX, strideY, dxyinv);\n"
"        const float pyz = DerCross(pc, i, strideY, strideZ, dyzinv);\n"
"        const float pxz = DerCross(pc, i, strideX, strideZ, dxzinv);\n"
"        const float cpxx = ch1dxx[i] * pxx;\n"
"        const float cpyy = ch1dyy[i] * pyy;\n"
"        const float cpzz = ch1dzz[i] * pzz;\n"
"        const float cpxy = ch1dxy[i] * pxy;\n"
"        const float cpxz = ch1dxz[i] * pxz;\n"
"        const float cpyz = ch1dyz[i] * pyz;\n"
"        const float h1p = cpxx + cpyy + cpzz + cpxy + cpxz + cpyz;\n"
"        const float h2p = pxx + pyy + pzz - h1p;\n"
"        const float qxx = Der2(qc, i, strideX, dxxinv);\n"
"        const float qyy = Der2(qc, i, strideY, dyyinv);\n"
"        const float qzz = Der2(qc, i, strideZ, dzzinv);\n"
"        const float qxy = DerCross(qc, i, strideX, strideY, dxyinv);\n"
"        const float qyz = DerCross(qc, i, strideY, strideZ, dyzinv);\n"
"        const float qxz = DerCross(qc, i, strideX, strideZ, dxzinv);\n"
"        const float cqxx = ch1dxx[i] * qxx;\n"
"        const float cqyy = ch1dyy[i] * qyy;\n"
"        const float cqzz = ch1dzz[i] * qzz;\n"
"        const float cqxy = ch1dxy[i] * qxy;\n"
"        const float cqxz = ch1dxz[i] * qxz;\n"
"        const float cqyz = ch1dyz[i] * qyz;\n"
"        const float h1q = cqxx + cqyy + cqzz + cqxy + cqxz + cqyz;\n"
"        const float h2q = qxx + qyy + qzz - h1q;\n"
"        const float h1pmq = h1p - h1q;\n"
"        const float h2pmq = h2p - h2q;\n"
"        const float rhsp = v2px[i] * h2p + v2pz[i] * h1q + v2sz[i] * h1pmq;\n"
"        const float rhsq = v2pn[i] * h2p + v2pz[i] * h1q - v2sz[i] * h2pmq;\n"
"        pp[i] = 2.0f * pc[i] - pp[i] + rhsp * dt * dt;\n"
"        qp[i] = 2.0f * qc[i] - qp[i] + rhsq * dt * dt;\n"
"    }\n"
"}\n"
"__kernel void insert_source(const float val, const int index, __global float *pc, __global float *qc) {\n"
"    if (get_global_id(0) == 0) {\n"
"        pc[index] += val;\n"
"        qc[index] += val;\n"
"    }\n"
"}\n";

#endif
